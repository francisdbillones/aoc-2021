<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="5611"><g><title>[[stack]] (1 samples, 0.02%)</title><rect x="0.0000%" y="933" width="0.0178%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="917" width="0.0178%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0000%" y="901" width="0.0178%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0178%" y="917" width="0.0178%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2678%" y="927.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0356%" y="517" width="0.0178%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2856%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0356%" y="501" width="0.0178%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.2856%" y="511.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0356%" y="485" width="0.0178%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2856%" y="495.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.02%)</title><rect x="0.0356%" y="469" width="0.0178%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2856%" y="479.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.02%)</title><rect x="0.0356%" y="453" width="0.0178%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2856%" y="463.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.02%)</title><rect x="0.0356%" y="437" width="0.0178%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2856%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.02%)</title><rect x="0.0356%" y="421" width="0.0178%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.2856%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1 samples, 0.02%)</title><rect x="0.0356%" y="405" width="0.0178%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.2856%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="0.0356%" y="389" width="0.0178%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2856%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0535%" y="357" width="0.0178%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3035%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.02%)</title><rect x="0.0535%" y="341" width="0.0178%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.3035%" y="351.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.12%)</title><rect x="0.0891%" y="85" width="0.1248%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="7"/><text x="0.3391%" y="95.50"></text></g><g><title>tcache_get (5 samples, 0.09%)</title><rect x="0.1248%" y="69" width="0.0891%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="5"/><text x="0.3748%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.16%)</title><rect x="0.0713%" y="181" width="0.1604%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="9"/><text x="0.3213%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.16%)</title><rect x="0.0713%" y="165" width="0.1604%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="9"/><text x="0.3213%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.16%)</title><rect x="0.0713%" y="149" width="0.1604%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="9"/><text x="0.3213%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.16%)</title><rect x="0.0713%" y="133" width="0.1604%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="9"/><text x="0.3213%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.16%)</title><rect x="0.0713%" y="117" width="0.1604%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="9"/><text x="0.3213%" y="127.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.16%)</title><rect x="0.0713%" y="101" width="0.1604%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="9"/><text x="0.3213%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="0.2139%" y="85" width="0.0178%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="0.4639%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="0.2139%" y="69" width="0.0178%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="1"/><text x="0.4639%" y="79.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (10 samples, 0.18%)</title><rect x="0.0713%" y="309" width="0.1782%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="10"/><text x="0.3213%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (10 samples, 0.18%)</title><rect x="0.0713%" y="293" width="0.1782%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="10"/><text x="0.3213%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (10 samples, 0.18%)</title><rect x="0.0713%" y="277" width="0.1782%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="10"/><text x="0.3213%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (10 samples, 0.18%)</title><rect x="0.0713%" y="261" width="0.1782%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="10"/><text x="0.3213%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.18%)</title><rect x="0.0713%" y="245" width="0.1782%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="10"/><text x="0.3213%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.18%)</title><rect x="0.0713%" y="229" width="0.1782%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="10"/><text x="0.3213%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.18%)</title><rect x="0.0713%" y="213" width="0.1782%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="10"/><text x="0.3213%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.18%)</title><rect x="0.0713%" y="197" width="0.1782%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="10"/><text x="0.3213%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="0.2317%" y="181" width="0.0178%" height="15" fill="rgb(254,191,54)" fg:x="13" fg:w="1"/><text x="0.4817%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="0.2317%" y="165" width="0.0178%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="1"/><text x="0.4817%" y="175.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.02%)</title><rect x="0.2317%" y="149" width="0.0178%" height="15" fill="rgb(233,36,39)" fg:x="13" fg:w="1"/><text x="0.4817%" y="159.50"></text></g><g><title>__GI___libc_free (6 samples, 0.11%)</title><rect x="0.2673%" y="213" width="0.1069%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="6"/><text x="0.5173%" y="223.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="0.3030%" y="197" width="0.0713%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="4"/><text x="0.5530%" y="207.50"></text></g><g><title>tcache_put (1 samples, 0.02%)</title><rect x="0.3564%" y="181" width="0.0178%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="0.6064%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.14%)</title><rect x="0.2495%" y="309" width="0.1426%" height="15" fill="rgb(232,182,51)" fg:x="14" fg:w="8"/><text x="0.4995%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.14%)</title><rect x="0.2495%" y="293" width="0.1426%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="8"/><text x="0.4995%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.14%)</title><rect x="0.2495%" y="277" width="0.1426%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="8"/><text x="0.4995%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.14%)</title><rect x="0.2495%" y="261" width="0.1426%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="8"/><text x="0.4995%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.14%)</title><rect x="0.2495%" y="245" width="0.1426%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="8"/><text x="0.4995%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.14%)</title><rect x="0.2495%" y="229" width="0.1426%" height="15" fill="rgb(222,207,29)" fg:x="14" fg:w="8"/><text x="0.4995%" y="239.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="0.3743%" y="213" width="0.0178%" height="15" fill="rgb(206,96,30)" fg:x="21" fg:w="1"/><text x="0.6243%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="0.3743%" y="197" width="0.0178%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="1"/><text x="0.6243%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.43%)</title><rect x="0.0535%" y="373" width="0.4277%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="24"/><text x="0.3035%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (23 samples, 0.41%)</title><rect x="0.0713%" y="357" width="0.4099%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="23"/><text x="0.3213%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (23 samples, 0.41%)</title><rect x="0.0713%" y="341" width="0.4099%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="23"/><text x="0.3213%" y="351.50"></text></g><g><title>day15::parse::{{closure}}::{{closure}} (23 samples, 0.41%)</title><rect x="0.0713%" y="325" width="0.4099%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="23"/><text x="0.3213%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (5 samples, 0.09%)</title><rect x="0.3921%" y="309" width="0.0891%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="5"/><text x="0.6421%" y="319.50"></text></g><g><title>day15::parse (26 samples, 0.46%)</title><rect x="0.0356%" y="645" width="0.4634%" height="15" fill="rgb(247,123,22)" fg:x="2" fg:w="26"/><text x="0.2856%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 0.46%)</title><rect x="0.0356%" y="629" width="0.4634%" height="15" fill="rgb(231,138,38)" fg:x="2" fg:w="26"/><text x="0.2856%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (26 samples, 0.46%)</title><rect x="0.0356%" y="613" width="0.4634%" height="15" fill="rgb(231,145,46)" fg:x="2" fg:w="26"/><text x="0.2856%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 0.46%)</title><rect x="0.0356%" y="597" width="0.4634%" height="15" fill="rgb(251,118,11)" fg:x="2" fg:w="26"/><text x="0.2856%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (26 samples, 0.46%)</title><rect x="0.0356%" y="581" width="0.4634%" height="15" fill="rgb(217,147,25)" fg:x="2" fg:w="26"/><text x="0.2856%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 0.46%)</title><rect x="0.0356%" y="565" width="0.4634%" height="15" fill="rgb(247,81,37)" fg:x="2" fg:w="26"/><text x="0.2856%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (26 samples, 0.46%)</title><rect x="0.0356%" y="549" width="0.4634%" height="15" fill="rgb(209,12,38)" fg:x="2" fg:w="26"/><text x="0.2856%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.46%)</title><rect x="0.0356%" y="533" width="0.4634%" height="15" fill="rgb(227,1,9)" fg:x="2" fg:w="26"/><text x="0.2856%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (25 samples, 0.45%)</title><rect x="0.0535%" y="517" width="0.4456%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="25"/><text x="0.3035%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (25 samples, 0.45%)</title><rect x="0.0535%" y="501" width="0.4456%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="25"/><text x="0.3035%" y="511.50"></text></g><g><title>day15::parse::{{closure}} (25 samples, 0.45%)</title><rect x="0.0535%" y="485" width="0.4456%" height="15" fill="rgb(210,229,1)" fg:x="3" fg:w="25"/><text x="0.3035%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 0.45%)</title><rect x="0.0535%" y="469" width="0.4456%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="25"/><text x="0.3035%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (25 samples, 0.45%)</title><rect x="0.0535%" y="453" width="0.4456%" height="15" fill="rgb(234,67,33)" fg:x="3" fg:w="25"/><text x="0.3035%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 0.45%)</title><rect x="0.0535%" y="437" width="0.4456%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="25"/><text x="0.3035%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (25 samples, 0.45%)</title><rect x="0.0535%" y="421" width="0.4456%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="25"/><text x="0.3035%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (25 samples, 0.45%)</title><rect x="0.0535%" y="405" width="0.4456%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="25"/><text x="0.3035%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (25 samples, 0.45%)</title><rect x="0.0535%" y="389" width="0.4456%" height="15" fill="rgb(246,177,23)" fg:x="3" fg:w="25"/><text x="0.3035%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.4812%" y="373" width="0.0178%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="1"/><text x="0.7312%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.4812%" y="357" width="0.0178%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="1"/><text x="0.7312%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="0.4812%" y="341" width="0.0178%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="1"/><text x="0.7312%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="0.4812%" y="325" width="0.0178%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="1"/><text x="0.7312%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.4812%" y="309" width="0.0178%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="1"/><text x="0.7312%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="0.4812%" y="293" width="0.0178%" height="15" fill="rgb(233,84,52)" fg:x="27" fg:w="1"/><text x="0.7312%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="0.4812%" y="277" width="0.0178%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="1"/><text x="0.7312%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="0.4812%" y="261" width="0.0178%" height="15" fill="rgb(249,43,39)" fg:x="27" fg:w="1"/><text x="0.7312%" y="271.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="0.4812%" y="245" width="0.0178%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="1"/><text x="0.7312%" y="255.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="0.4812%" y="229" width="0.0178%" height="15" fill="rgb(236,212,23)" fg:x="27" fg:w="1"/><text x="0.7312%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="0.4812%" y="213" width="0.0178%" height="15" fill="rgb(242,79,21)" fg:x="27" fg:w="1"/><text x="0.7312%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="197" width="0.0178%" height="15" fill="rgb(211,96,35)" fg:x="27" fg:w="1"/><text x="0.7312%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="181" width="0.0178%" height="15" fill="rgb(253,215,40)" fg:x="27" fg:w="1"/><text x="0.7312%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="165" width="0.0178%" height="15" fill="rgb(211,81,21)" fg:x="27" fg:w="1"/><text x="0.7312%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="149" width="0.0178%" height="15" fill="rgb(208,190,38)" fg:x="27" fg:w="1"/><text x="0.7312%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="133" width="0.0178%" height="15" fill="rgb(235,213,38)" fg:x="27" fg:w="1"/><text x="0.7312%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="117" width="0.0178%" height="15" fill="rgb(237,122,38)" fg:x="27" fg:w="1"/><text x="0.7312%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="101" width="0.0178%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="1"/><text x="0.7312%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="85" width="0.0178%" height="15" fill="rgb(240,68,47)" fg:x="27" fg:w="1"/><text x="0.7312%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="69" width="0.0178%" height="15" fill="rgb(210,16,53)" fg:x="27" fg:w="1"/><text x="0.7312%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="53" width="0.0178%" height="15" fill="rgb(235,124,12)" fg:x="27" fg:w="1"/><text x="0.7312%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.4812%" y="37" width="0.0178%" height="15" fill="rgb(224,169,11)" fg:x="27" fg:w="1"/><text x="0.7312%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.09%)</title><rect x="0.6772%" y="629" width="0.0891%" height="15" fill="rgb(250,166,2)" fg:x="38" fg:w="5"/><text x="0.9272%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.09%)</title><rect x="0.6772%" y="613" width="0.0891%" height="15" fill="rgb(242,216,29)" fg:x="38" fg:w="5"/><text x="0.9272%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.09%)</title><rect x="0.6772%" y="597" width="0.0891%" height="15" fill="rgb(230,116,27)" fg:x="38" fg:w="5"/><text x="0.9272%" y="607.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.07%)</title><rect x="0.7664%" y="613" width="0.0713%" height="15" fill="rgb(228,99,48)" fg:x="43" fg:w="4"/><text x="1.0164%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.07%)</title><rect x="0.7664%" y="597" width="0.0713%" height="15" fill="rgb(253,11,6)" fg:x="43" fg:w="4"/><text x="1.0164%" y="607.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.02%)</title><rect x="0.8198%" y="581" width="0.0178%" height="15" fill="rgb(247,143,39)" fg:x="46" fg:w="1"/><text x="1.0698%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.02%)</title><rect x="0.8198%" y="565" width="0.0178%" height="15" fill="rgb(236,97,10)" fg:x="46" fg:w="1"/><text x="1.0698%" y="575.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.12%)</title><rect x="0.7664%" y="629" width="0.1248%" height="15" fill="rgb(233,208,19)" fg:x="43" fg:w="7"/><text x="1.0164%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.05%)</title><rect x="0.8376%" y="613" width="0.0535%" height="15" fill="rgb(216,164,2)" fg:x="47" fg:w="3"/><text x="1.0876%" y="623.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.05%)</title><rect x="0.8376%" y="597" width="0.0535%" height="15" fill="rgb(220,129,5)" fg:x="47" fg:w="3"/><text x="1.0876%" y="607.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (3 samples, 0.05%)</title><rect x="0.8376%" y="581" width="0.0535%" height="15" fill="rgb(242,17,10)" fg:x="47" fg:w="3"/><text x="1.0876%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (3 samples, 0.05%)</title><rect x="0.8376%" y="565" width="0.0535%" height="15" fill="rgb(242,107,0)" fg:x="47" fg:w="3"/><text x="1.0876%" y="575.50"></text></g><g><title>core::ptr::read (3 samples, 0.05%)</title><rect x="0.8376%" y="549" width="0.0535%" height="15" fill="rgb(251,28,31)" fg:x="47" fg:w="3"/><text x="1.0876%" y="559.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.05%)</title><rect x="0.8376%" y="533" width="0.0535%" height="15" fill="rgb(233,223,10)" fg:x="47" fg:w="3"/><text x="1.0876%" y="543.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (13 samples, 0.23%)</title><rect x="0.9802%" y="581" width="0.2317%" height="15" fill="rgb(215,21,27)" fg:x="55" fg:w="13"/><text x="1.2302%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="1.3010%" y="533" width="0.0535%" height="15" fill="rgb(232,23,21)" fg:x="73" fg:w="3"/><text x="1.5510%" y="543.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (4 samples, 0.07%)</title><rect x="1.3010%" y="549" width="0.0713%" height="15" fill="rgb(244,5,23)" fg:x="73" fg:w="4"/><text x="1.5510%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="1.3545%" y="533" width="0.0178%" height="15" fill="rgb(226,81,46)" fg:x="76" fg:w="1"/><text x="1.6045%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="1.3545%" y="517" width="0.0178%" height="15" fill="rgb(247,70,30)" fg:x="76" fg:w="1"/><text x="1.6045%" y="527.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (2 samples, 0.04%)</title><rect x="1.3723%" y="549" width="0.0356%" height="15" fill="rgb(212,68,19)" fg:x="77" fg:w="2"/><text x="1.6223%" y="559.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (2 samples, 0.04%)</title><rect x="1.3723%" y="533" width="0.0356%" height="15" fill="rgb(240,187,13)" fg:x="77" fg:w="2"/><text x="1.6223%" y="543.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (2 samples, 0.04%)</title><rect x="1.4079%" y="485" width="0.0356%" height="15" fill="rgb(223,113,26)" fg:x="79" fg:w="2"/><text x="1.6579%" y="495.50"></text></g><g><title>core::cmp::Ordering::then_with (2 samples, 0.04%)</title><rect x="1.4436%" y="485" width="0.0356%" height="15" fill="rgb(206,192,2)" fg:x="81" fg:w="2"/><text x="1.6936%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (5 samples, 0.09%)</title><rect x="1.4079%" y="549" width="0.0891%" height="15" fill="rgb(241,108,4)" fg:x="79" fg:w="5"/><text x="1.6579%" y="559.50"></text></g><g><title>core::cmp::PartialOrd::le (5 samples, 0.09%)</title><rect x="1.4079%" y="533" width="0.0891%" height="15" fill="rgb(247,173,49)" fg:x="79" fg:w="5"/><text x="1.6579%" y="543.50"></text></g><g><title>&lt;day15::Node as core::cmp::PartialOrd&gt;::partial_cmp (5 samples, 0.09%)</title><rect x="1.4079%" y="517" width="0.0891%" height="15" fill="rgb(224,114,35)" fg:x="79" fg:w="5"/><text x="1.6579%" y="527.50"></text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp (5 samples, 0.09%)</title><rect x="1.4079%" y="501" width="0.0891%" height="15" fill="rgb(245,159,27)" fg:x="79" fg:w="5"/><text x="1.6579%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.02%)</title><rect x="1.4792%" y="485" width="0.0178%" height="15" fill="rgb(245,172,44)" fg:x="83" fg:w="1"/><text x="1.7292%" y="495.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (13 samples, 0.23%)</title><rect x="1.3010%" y="565" width="0.2317%" height="15" fill="rgb(236,23,11)" fg:x="73" fg:w="13"/><text x="1.5510%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day15::Node&gt;&gt; (2 samples, 0.04%)</title><rect x="1.4971%" y="549" width="0.0356%" height="15" fill="rgb(205,117,38)" fg:x="84" fg:w="2"/><text x="1.7471%" y="559.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="1.4971%" y="533" width="0.0356%" height="15" fill="rgb(237,72,25)" fg:x="84" fg:w="2"/><text x="1.7471%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="1.4971%" y="517" width="0.0356%" height="15" fill="rgb(244,70,9)" fg:x="84" fg:w="2"/><text x="1.7471%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.34%)</title><rect x="1.5327%" y="549" width="0.3386%" height="15" fill="rgb(217,125,39)" fg:x="86" fg:w="19"/><text x="1.7827%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (27 samples, 0.48%)</title><rect x="1.5327%" y="565" width="0.4812%" height="15" fill="rgb(235,36,10)" fg:x="86" fg:w="27"/><text x="1.7827%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8 samples, 0.14%)</title><rect x="1.8713%" y="549" width="0.1426%" height="15" fill="rgb(251,123,47)" fg:x="105" fg:w="8"/><text x="2.1213%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.14%)</title><rect x="1.8713%" y="533" width="0.1426%" height="15" fill="rgb(221,13,13)" fg:x="105" fg:w="8"/><text x="2.1213%" y="543.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (9 samples, 0.16%)</title><rect x="2.2991%" y="501" width="0.1604%" height="15" fill="rgb(238,131,9)" fg:x="129" fg:w="9"/><text x="2.5491%" y="511.50"></text></g><g><title>core::cmp::Ordering::then_with (11 samples, 0.20%)</title><rect x="2.4595%" y="501" width="0.1960%" height="15" fill="rgb(211,50,8)" fg:x="138" fg:w="11"/><text x="2.7095%" y="511.50"></text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp::{{closure}} (2 samples, 0.04%)</title><rect x="2.6199%" y="485" width="0.0356%" height="15" fill="rgb(245,182,24)" fg:x="147" fg:w="2"/><text x="2.8699%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.04%)</title><rect x="2.6199%" y="469" width="0.0356%" height="15" fill="rgb(242,14,37)" fg:x="147" fg:w="2"/><text x="2.8699%" y="479.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (104 samples, 1.85%)</title><rect x="0.8911%" y="629" width="1.8535%" height="15" fill="rgb(246,228,12)" fg:x="50" fg:w="104"/><text x="1.1411%" y="639.50">a..</text></g><g><title>core::option::Option&lt;T&gt;::map (104 samples, 1.85%)</title><rect x="0.8911%" y="613" width="1.8535%" height="15" fill="rgb(213,55,15)" fg:x="50" fg:w="104"/><text x="1.1411%" y="623.50">c..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (101 samples, 1.80%)</title><rect x="0.9446%" y="597" width="1.8000%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="101"/><text x="1.1946%" y="607.50">a..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (86 samples, 1.53%)</title><rect x="1.2119%" y="581" width="1.5327%" height="15" fill="rgb(230,59,30)" fg:x="68" fg:w="86"/><text x="1.4619%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (41 samples, 0.73%)</title><rect x="2.0139%" y="565" width="0.7307%" height="15" fill="rgb(209,121,21)" fg:x="113" fg:w="41"/><text x="2.2639%" y="575.50"></text></g><g><title>core::cmp::PartialOrd::le (41 samples, 0.73%)</title><rect x="2.0139%" y="549" width="0.7307%" height="15" fill="rgb(220,109,13)" fg:x="113" fg:w="41"/><text x="2.2639%" y="559.50"></text></g><g><title>&lt;day15::Node as core::cmp::PartialOrd&gt;::partial_cmp (26 samples, 0.46%)</title><rect x="2.2812%" y="533" width="0.4634%" height="15" fill="rgb(232,18,1)" fg:x="128" fg:w="26"/><text x="2.5312%" y="543.50"></text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp (26 samples, 0.46%)</title><rect x="2.2812%" y="517" width="0.4634%" height="15" fill="rgb(215,41,42)" fg:x="128" fg:w="26"/><text x="2.5312%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (5 samples, 0.09%)</title><rect x="2.6555%" y="501" width="0.0891%" height="15" fill="rgb(224,123,36)" fg:x="149" fg:w="5"/><text x="2.9055%" y="511.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (1 samples, 0.02%)</title><rect x="2.7446%" y="597" width="0.0178%" height="15" fill="rgb(240,125,3)" fg:x="154" fg:w="1"/><text x="2.9946%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="2.7446%" y="581" width="0.0178%" height="15" fill="rgb(205,98,50)" fg:x="154" fg:w="1"/><text x="2.9946%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="2.7446%" y="565" width="0.0178%" height="15" fill="rgb(205,185,37)" fg:x="154" fg:w="1"/><text x="2.9946%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (6 samples, 0.11%)</title><rect x="2.7624%" y="597" width="0.1069%" height="15" fill="rgb(238,207,15)" fg:x="155" fg:w="6"/><text x="3.0124%" y="607.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (6 samples, 0.11%)</title><rect x="2.7624%" y="581" width="0.1069%" height="15" fill="rgb(213,199,42)" fg:x="155" fg:w="6"/><text x="3.0124%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (1 samples, 0.02%)</title><rect x="2.8694%" y="597" width="0.0178%" height="15" fill="rgb(235,201,11)" fg:x="161" fg:w="1"/><text x="3.1194%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.02%)</title><rect x="2.8694%" y="581" width="0.0178%" height="15" fill="rgb(207,46,11)" fg:x="161" fg:w="1"/><text x="3.1194%" y="591.50"></text></g><g><title>&lt;day15::Node as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.02%)</title><rect x="2.8694%" y="565" width="0.0178%" height="15" fill="rgb(241,35,35)" fg:x="161" fg:w="1"/><text x="3.1194%" y="575.50"></text></g><g><title>day15::shortest_path (1 samples, 0.02%)</title><rect x="2.8694%" y="549" width="0.0178%" height="15" fill="rgb(243,32,47)" fg:x="161" fg:w="1"/><text x="3.1194%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (9 samples, 0.16%)</title><rect x="2.7446%" y="629" width="0.1604%" height="15" fill="rgb(247,202,23)" fg:x="154" fg:w="9"/><text x="2.9946%" y="639.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (9 samples, 0.16%)</title><rect x="2.7446%" y="613" width="0.1604%" height="15" fill="rgb(219,102,11)" fg:x="154" fg:w="9"/><text x="2.9946%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day15::Node&gt;&gt; (1 samples, 0.02%)</title><rect x="2.8872%" y="597" width="0.0178%" height="15" fill="rgb(243,110,44)" fg:x="162" fg:w="1"/><text x="3.1372%" y="607.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="2.8872%" y="581" width="0.0178%" height="15" fill="rgb(222,74,54)" fg:x="162" fg:w="1"/><text x="3.1372%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="2.8872%" y="565" width="0.0178%" height="15" fill="rgb(216,99,12)" fg:x="162" fg:w="1"/><text x="3.1372%" y="575.50"></text></g><g><title>day15::Node::get_adjacent_nodes (5 samples, 0.09%)</title><rect x="2.9050%" y="629" width="0.0891%" height="15" fill="rgb(226,22,26)" fg:x="163" fg:w="5"/><text x="3.1550%" y="639.50"></text></g><g><title>day15::part1 (172 samples, 3.07%)</title><rect x="0.0356%" y="661" width="3.0654%" height="15" fill="rgb(217,163,10)" fg:x="2" fg:w="172"/><text x="0.2856%" y="671.50">day..</text></g><g><title>day15::shortest_path (146 samples, 2.60%)</title><rect x="0.4990%" y="645" width="2.6020%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="146"/><text x="0.7490%" y="655.50">da..</text></g><g><title>day15::shortest_path (6 samples, 0.11%)</title><rect x="2.9941%" y="629" width="0.1069%" height="15" fill="rgb(252,105,26)" fg:x="168" fg:w="6"/><text x="3.2441%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="3.1011%" y="645" width="0.0356%" height="15" fill="rgb(220,39,43)" fg:x="174" fg:w="2"/><text x="3.3511%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="3.1011%" y="629" width="0.0356%" height="15" fill="rgb(229,68,48)" fg:x="174" fg:w="2"/><text x="3.3511%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;]&gt; (2 samples, 0.04%)</title><rect x="3.1011%" y="613" width="0.0356%" height="15" fill="rgb(252,8,32)" fg:x="174" fg:w="2"/><text x="3.3511%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.04%)</title><rect x="3.1011%" y="597" width="0.0356%" height="15" fill="rgb(223,20,43)" fg:x="174" fg:w="2"/><text x="3.3511%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.04%)</title><rect x="3.1011%" y="581" width="0.0356%" height="15" fill="rgb(229,81,49)" fg:x="174" fg:w="2"/><text x="3.3511%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="3.1011%" y="565" width="0.0356%" height="15" fill="rgb(236,28,36)" fg:x="174" fg:w="2"/><text x="3.3511%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.04%)</title><rect x="3.1011%" y="549" width="0.0356%" height="15" fill="rgb(249,185,26)" fg:x="174" fg:w="2"/><text x="3.3511%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.04%)</title><rect x="3.1011%" y="533" width="0.0356%" height="15" fill="rgb(249,174,33)" fg:x="174" fg:w="2"/><text x="3.3511%" y="543.50"></text></g><g><title>__GI___libc_free (2 samples, 0.04%)</title><rect x="3.1011%" y="517" width="0.0356%" height="15" fill="rgb(233,201,37)" fg:x="174" fg:w="2"/><text x="3.3511%" y="527.50"></text></g><g><title>_int_free (2 samples, 0.04%)</title><rect x="3.1011%" y="501" width="0.0356%" height="15" fill="rgb(221,78,26)" fg:x="174" fg:w="2"/><text x="3.3511%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="3.1723%" y="629" width="0.0178%" height="15" fill="rgb(250,127,30)" fg:x="178" fg:w="1"/><text x="3.4223%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="3.1723%" y="613" width="0.0178%" height="15" fill="rgb(230,49,44)" fg:x="178" fg:w="1"/><text x="3.4223%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="3.1723%" y="597" width="0.0178%" height="15" fill="rgb(229,67,23)" fg:x="178" fg:w="1"/><text x="3.4223%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (9 samples, 0.16%)</title><rect x="3.1902%" y="629" width="0.1604%" height="15" fill="rgb(249,83,47)" fg:x="179" fg:w="9"/><text x="3.4402%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9 samples, 0.16%)</title><rect x="3.1902%" y="613" width="0.1604%" height="15" fill="rgb(215,43,3)" fg:x="179" fg:w="9"/><text x="3.4402%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.16%)</title><rect x="3.1902%" y="597" width="0.1604%" height="15" fill="rgb(238,154,13)" fg:x="179" fg:w="9"/><text x="3.4402%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="3.3506%" y="373" width="0.1069%" height="15" fill="rgb(219,56,2)" fg:x="188" fg:w="6"/><text x="3.6006%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="3.3506%" y="357" width="0.1069%" height="15" fill="rgb(233,0,4)" fg:x="188" fg:w="6"/><text x="3.6006%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="3.3506%" y="341" width="0.1069%" height="15" fill="rgb(235,30,7)" fg:x="188" fg:w="6"/><text x="3.6006%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="3.3684%" y="325" width="0.0891%" height="15" fill="rgb(250,79,13)" fg:x="189" fg:w="5"/><text x="3.6184%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="3.3684%" y="309" width="0.0891%" height="15" fill="rgb(211,146,34)" fg:x="189" fg:w="5"/><text x="3.6184%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.4218%" y="293" width="0.0356%" height="15" fill="rgb(228,22,38)" fg:x="192" fg:w="2"/><text x="3.6718%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.4218%" y="277" width="0.0356%" height="15" fill="rgb(235,168,5)" fg:x="192" fg:w="2"/><text x="3.6718%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.4218%" y="261" width="0.0356%" height="15" fill="rgb(221,155,16)" fg:x="192" fg:w="2"/><text x="3.6718%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.4218%" y="245" width="0.0356%" height="15" fill="rgb(215,215,53)" fg:x="192" fg:w="2"/><text x="3.6718%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.4218%" y="229" width="0.0356%" height="15" fill="rgb(223,4,10)" fg:x="192" fg:w="2"/><text x="3.6718%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="3.4218%" y="213" width="0.0356%" height="15" fill="rgb(234,103,6)" fg:x="192" fg:w="2"/><text x="3.6718%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="357" width="0.0178%" height="15" fill="rgb(227,97,0)" fg:x="194" fg:w="1"/><text x="3.7075%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="341" width="0.0178%" height="15" fill="rgb(234,150,53)" fg:x="194" fg:w="1"/><text x="3.7075%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="325" width="0.0178%" height="15" fill="rgb(228,201,54)" fg:x="194" fg:w="1"/><text x="3.7075%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="309" width="0.0178%" height="15" fill="rgb(222,22,37)" fg:x="194" fg:w="1"/><text x="3.7075%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="293" width="0.0178%" height="15" fill="rgb(237,53,32)" fg:x="194" fg:w="1"/><text x="3.7075%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="277" width="0.0178%" height="15" fill="rgb(233,25,53)" fg:x="194" fg:w="1"/><text x="3.7075%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="261" width="0.0178%" height="15" fill="rgb(210,40,34)" fg:x="194" fg:w="1"/><text x="3.7075%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="245" width="0.0178%" height="15" fill="rgb(241,220,44)" fg:x="194" fg:w="1"/><text x="3.7075%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="229" width="0.0178%" height="15" fill="rgb(235,28,35)" fg:x="194" fg:w="1"/><text x="3.7075%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="213" width="0.0178%" height="15" fill="rgb(210,56,17)" fg:x="194" fg:w="1"/><text x="3.7075%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4575%" y="197" width="0.0178%" height="15" fill="rgb(224,130,29)" fg:x="194" fg:w="1"/><text x="3.7075%" y="207.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.14%)</title><rect x="3.3506%" y="405" width="0.1426%" height="15" fill="rgb(235,212,8)" fg:x="188" fg:w="8"/><text x="3.6006%" y="415.50"></text></g><g><title>_int_malloc (8 samples, 0.14%)</title><rect x="3.3506%" y="389" width="0.1426%" height="15" fill="rgb(223,33,50)" fg:x="188" fg:w="8"/><text x="3.6006%" y="399.50"></text></g><g><title>sysmalloc (2 samples, 0.04%)</title><rect x="3.4575%" y="373" width="0.0356%" height="15" fill="rgb(219,149,13)" fg:x="194" fg:w="2"/><text x="3.7075%" y="383.50"></text></g><g><title>__glibc_morecore (1 samples, 0.02%)</title><rect x="3.4753%" y="357" width="0.0178%" height="15" fill="rgb(250,156,29)" fg:x="195" fg:w="1"/><text x="3.7253%" y="367.50"></text></g><g><title>__GI___sbrk (1 samples, 0.02%)</title><rect x="3.4753%" y="341" width="0.0178%" height="15" fill="rgb(216,193,19)" fg:x="195" fg:w="1"/><text x="3.7253%" y="351.50"></text></g><g><title>__GI___sbrk (1 samples, 0.02%)</title><rect x="3.4753%" y="325" width="0.0178%" height="15" fill="rgb(216,135,14)" fg:x="195" fg:w="1"/><text x="3.7253%" y="335.50"></text></g><g><title>__brk (1 samples, 0.02%)</title><rect x="3.4753%" y="309" width="0.0178%" height="15" fill="rgb(241,47,5)" fg:x="195" fg:w="1"/><text x="3.7253%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="293" width="0.0178%" height="15" fill="rgb(233,42,35)" fg:x="195" fg:w="1"/><text x="3.7253%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="277" width="0.0178%" height="15" fill="rgb(231,13,6)" fg:x="195" fg:w="1"/><text x="3.7253%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="261" width="0.0178%" height="15" fill="rgb(207,181,40)" fg:x="195" fg:w="1"/><text x="3.7253%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="245" width="0.0178%" height="15" fill="rgb(254,173,49)" fg:x="195" fg:w="1"/><text x="3.7253%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="229" width="0.0178%" height="15" fill="rgb(221,1,38)" fg:x="195" fg:w="1"/><text x="3.7253%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="213" width="0.0178%" height="15" fill="rgb(206,124,46)" fg:x="195" fg:w="1"/><text x="3.7253%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4753%" y="197" width="0.0178%" height="15" fill="rgb(249,21,11)" fg:x="195" fg:w="1"/><text x="3.7253%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.16%)</title><rect x="3.3506%" y="501" width="0.1604%" height="15" fill="rgb(222,201,40)" fg:x="188" fg:w="9"/><text x="3.6006%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.16%)</title><rect x="3.3506%" y="485" width="0.1604%" height="15" fill="rgb(235,61,29)" fg:x="188" fg:w="9"/><text x="3.6006%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.16%)</title><rect x="3.3506%" y="469" width="0.1604%" height="15" fill="rgb(219,207,3)" fg:x="188" fg:w="9"/><text x="3.6006%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.16%)</title><rect x="3.3506%" y="453" width="0.1604%" height="15" fill="rgb(222,56,46)" fg:x="188" fg:w="9"/><text x="3.6006%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.16%)</title><rect x="3.3506%" y="437" width="0.1604%" height="15" fill="rgb(239,76,54)" fg:x="188" fg:w="9"/><text x="3.6006%" y="447.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.16%)</title><rect x="3.3506%" y="421" width="0.1604%" height="15" fill="rgb(231,124,27)" fg:x="188" fg:w="9"/><text x="3.6006%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="3.4931%" y="405" width="0.0178%" height="15" fill="rgb(249,195,6)" fg:x="196" fg:w="1"/><text x="3.7431%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="3.4931%" y="389" width="0.0178%" height="15" fill="rgb(237,174,47)" fg:x="196" fg:w="1"/><text x="3.7431%" y="399.50"></text></g><g><title>alloc::vec::from_elem (54 samples, 0.96%)</title><rect x="3.3506%" y="629" width="0.9624%" height="15" fill="rgb(206,201,31)" fg:x="188" fg:w="54"/><text x="3.6006%" y="639.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (54 samples, 0.96%)</title><rect x="3.3506%" y="613" width="0.9624%" height="15" fill="rgb(231,57,52)" fg:x="188" fg:w="54"/><text x="3.6006%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (54 samples, 0.96%)</title><rect x="3.3506%" y="597" width="0.9624%" height="15" fill="rgb(248,177,22)" fg:x="188" fg:w="54"/><text x="3.6006%" y="607.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (54 samples, 0.96%)</title><rect x="3.3506%" y="581" width="0.9624%" height="15" fill="rgb(215,211,37)" fg:x="188" fg:w="54"/><text x="3.6006%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 0.96%)</title><rect x="3.3506%" y="565" width="0.9624%" height="15" fill="rgb(241,128,51)" fg:x="188" fg:w="54"/><text x="3.6006%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 0.96%)</title><rect x="3.3506%" y="549" width="0.9624%" height="15" fill="rgb(227,165,31)" fg:x="188" fg:w="54"/><text x="3.6006%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (54 samples, 0.96%)</title><rect x="3.3506%" y="533" width="0.9624%" height="15" fill="rgb(228,167,24)" fg:x="188" fg:w="54"/><text x="3.6006%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 0.96%)</title><rect x="3.3506%" y="517" width="0.9624%" height="15" fill="rgb(228,143,12)" fg:x="188" fg:w="54"/><text x="3.6006%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (45 samples, 0.80%)</title><rect x="3.5110%" y="501" width="0.8020%" height="15" fill="rgb(249,149,8)" fg:x="197" fg:w="45"/><text x="3.7610%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.80%)</title><rect x="3.5110%" y="485" width="0.8020%" height="15" fill="rgb(243,35,44)" fg:x="197" fg:w="45"/><text x="3.7610%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned_erms (45 samples, 0.80%)</title><rect x="3.5110%" y="469" width="0.8020%" height="15" fill="rgb(246,89,9)" fg:x="197" fg:w="45"/><text x="3.7610%" y="479.50"></text></g><g><title>[unknown] (44 samples, 0.78%)</title><rect x="3.5288%" y="453" width="0.7842%" height="15" fill="rgb(233,213,13)" fg:x="198" fg:w="44"/><text x="3.7788%" y="463.50"></text></g><g><title>[unknown] (40 samples, 0.71%)</title><rect x="3.6001%" y="437" width="0.7129%" height="15" fill="rgb(233,141,41)" fg:x="202" fg:w="40"/><text x="3.8501%" y="447.50"></text></g><g><title>[unknown] (40 samples, 0.71%)</title><rect x="3.6001%" y="421" width="0.7129%" height="15" fill="rgb(239,167,4)" fg:x="202" fg:w="40"/><text x="3.8501%" y="431.50"></text></g><g><title>[unknown] (40 samples, 0.71%)</title><rect x="3.6001%" y="405" width="0.7129%" height="15" fill="rgb(209,217,16)" fg:x="202" fg:w="40"/><text x="3.8501%" y="415.50"></text></g><g><title>[unknown] (39 samples, 0.70%)</title><rect x="3.6179%" y="389" width="0.6951%" height="15" fill="rgb(219,88,35)" fg:x="203" fg:w="39"/><text x="3.8679%" y="399.50"></text></g><g><title>[unknown] (37 samples, 0.66%)</title><rect x="3.6535%" y="373" width="0.6594%" height="15" fill="rgb(220,193,23)" fg:x="205" fg:w="37"/><text x="3.9035%" y="383.50"></text></g><g><title>[unknown] (36 samples, 0.64%)</title><rect x="3.6714%" y="357" width="0.6416%" height="15" fill="rgb(230,90,52)" fg:x="206" fg:w="36"/><text x="3.9214%" y="367.50"></text></g><g><title>[unknown] (36 samples, 0.64%)</title><rect x="3.6714%" y="341" width="0.6416%" height="15" fill="rgb(252,106,19)" fg:x="206" fg:w="36"/><text x="3.9214%" y="351.50"></text></g><g><title>[unknown] (34 samples, 0.61%)</title><rect x="3.7070%" y="325" width="0.6060%" height="15" fill="rgb(206,74,20)" fg:x="208" fg:w="34"/><text x="3.9570%" y="335.50"></text></g><g><title>[unknown] (30 samples, 0.53%)</title><rect x="3.7783%" y="309" width="0.5347%" height="15" fill="rgb(230,138,44)" fg:x="212" fg:w="30"/><text x="4.0283%" y="319.50"></text></g><g><title>[unknown] (23 samples, 0.41%)</title><rect x="3.9030%" y="293" width="0.4099%" height="15" fill="rgb(235,182,43)" fg:x="219" fg:w="23"/><text x="4.1530%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="4.2595%" y="277" width="0.0535%" height="15" fill="rgb(242,16,51)" fg:x="239" fg:w="3"/><text x="4.5095%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.04%)</title><rect x="4.3130%" y="629" width="0.0356%" height="15" fill="rgb(248,9,4)" fg:x="242" fg:w="2"/><text x="4.5630%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.04%)</title><rect x="4.3130%" y="613" width="0.0356%" height="15" fill="rgb(210,31,22)" fg:x="242" fg:w="2"/><text x="4.5630%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="4.3308%" y="597" width="0.0178%" height="15" fill="rgb(239,54,39)" fg:x="243" fg:w="1"/><text x="4.5808%" y="607.50"></text></g><g><title>day15::main (4 samples, 0.07%)</title><rect x="4.3486%" y="629" width="0.0713%" height="15" fill="rgb(230,99,41)" fg:x="244" fg:w="4"/><text x="4.5986%" y="639.50"></text></g><g><title>day15::expand (75 samples, 1.34%)</title><rect x="3.1367%" y="645" width="1.3367%" height="15" fill="rgb(253,106,12)" fg:x="176" fg:w="75"/><text x="3.3867%" y="655.50"></text></g><g><title>day15::wrap (3 samples, 0.05%)</title><rect x="4.4199%" y="629" width="0.0535%" height="15" fill="rgb(213,46,41)" fg:x="248" fg:w="3"/><text x="4.6699%" y="639.50"></text></g><g><title>day15::main (36 samples, 0.64%)</title><rect x="4.4734%" y="645" width="0.6416%" height="15" fill="rgb(215,133,35)" fg:x="251" fg:w="36"/><text x="4.7234%" y="655.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="5.1150%" y="517" width="0.0178%" height="15" fill="rgb(213,28,5)" fg:x="287" fg:w="1"/><text x="5.3650%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="5.1150%" y="501" width="0.0178%" height="15" fill="rgb(215,77,49)" fg:x="287" fg:w="1"/><text x="5.3650%" y="511.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="5.1150%" y="485" width="0.0178%" height="15" fill="rgb(248,100,22)" fg:x="287" fg:w="1"/><text x="5.3650%" y="495.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.02%)</title><rect x="5.1150%" y="469" width="0.0178%" height="15" fill="rgb(208,67,9)" fg:x="287" fg:w="1"/><text x="5.3650%" y="479.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.02%)</title><rect x="5.1150%" y="453" width="0.0178%" height="15" fill="rgb(219,133,21)" fg:x="287" fg:w="1"/><text x="5.3650%" y="463.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.02%)</title><rect x="5.1150%" y="437" width="0.0178%" height="15" fill="rgb(246,46,29)" fg:x="287" fg:w="1"/><text x="5.3650%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.02%)</title><rect x="5.1150%" y="421" width="0.0178%" height="15" fill="rgb(246,185,52)" fg:x="287" fg:w="1"/><text x="5.3650%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.02%)</title><rect x="5.1150%" y="405" width="0.0178%" height="15" fill="rgb(252,136,11)" fg:x="287" fg:w="1"/><text x="5.3650%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (1 samples, 0.02%)</title><rect x="5.1150%" y="389" width="0.0178%" height="15" fill="rgb(219,138,53)" fg:x="287" fg:w="1"/><text x="5.3650%" y="399.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.11%)</title><rect x="5.1862%" y="85" width="0.1069%" height="15" fill="rgb(211,51,23)" fg:x="291" fg:w="6"/><text x="5.4362%" y="95.50"></text></g><g><title>tcache_get (3 samples, 0.05%)</title><rect x="5.2397%" y="69" width="0.0535%" height="15" fill="rgb(247,221,28)" fg:x="294" fg:w="3"/><text x="5.4897%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="5.1862%" y="181" width="0.1248%" height="15" fill="rgb(251,222,45)" fg:x="291" fg:w="7"/><text x="5.4362%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="5.1862%" y="165" width="0.1248%" height="15" fill="rgb(217,162,53)" fg:x="291" fg:w="7"/><text x="5.4362%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.12%)</title><rect x="5.1862%" y="149" width="0.1248%" height="15" fill="rgb(229,93,14)" fg:x="291" fg:w="7"/><text x="5.4362%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.12%)</title><rect x="5.1862%" y="133" width="0.1248%" height="15" fill="rgb(209,67,49)" fg:x="291" fg:w="7"/><text x="5.4362%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.12%)</title><rect x="5.1862%" y="117" width="0.1248%" height="15" fill="rgb(213,87,29)" fg:x="291" fg:w="7"/><text x="5.4362%" y="127.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.12%)</title><rect x="5.1862%" y="101" width="0.1248%" height="15" fill="rgb(205,151,52)" fg:x="291" fg:w="7"/><text x="5.4362%" y="111.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="5.2932%" y="85" width="0.0178%" height="15" fill="rgb(253,215,39)" fg:x="297" fg:w="1"/><text x="5.5432%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;mut str&gt;&gt;::from (9 samples, 0.16%)</title><rect x="5.1862%" y="293" width="0.1604%" height="15" fill="rgb(221,220,41)" fg:x="291" fg:w="9"/><text x="5.4362%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.16%)</title><rect x="5.1862%" y="277" width="0.1604%" height="15" fill="rgb(218,133,21)" fg:x="291" fg:w="9"/><text x="5.4362%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.16%)</title><rect x="5.1862%" y="261" width="0.1604%" height="15" fill="rgb(221,193,43)" fg:x="291" fg:w="9"/><text x="5.4362%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.16%)</title><rect x="5.1862%" y="245" width="0.1604%" height="15" fill="rgb(240,128,52)" fg:x="291" fg:w="9"/><text x="5.4362%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.16%)</title><rect x="5.1862%" y="229" width="0.1604%" height="15" fill="rgb(253,114,12)" fg:x="291" fg:w="9"/><text x="5.4362%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.16%)</title><rect x="5.1862%" y="213" width="0.1604%" height="15" fill="rgb(215,223,47)" fg:x="291" fg:w="9"/><text x="5.4362%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.16%)</title><rect x="5.1862%" y="197" width="0.1604%" height="15" fill="rgb(248,225,23)" fg:x="291" fg:w="9"/><text x="5.4362%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.04%)</title><rect x="5.3110%" y="181" width="0.0356%" height="15" fill="rgb(250,108,0)" fg:x="298" fg:w="2"/><text x="5.5610%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="5.3110%" y="165" width="0.0356%" height="15" fill="rgb(228,208,7)" fg:x="298" fg:w="2"/><text x="5.5610%" y="175.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.04%)</title><rect x="5.3110%" y="149" width="0.0356%" height="15" fill="rgb(244,45,10)" fg:x="298" fg:w="2"/><text x="5.5610%" y="159.50"></text></g><g><title>&lt;char as alloc::string::ToString&gt;::to_string (10 samples, 0.18%)</title><rect x="5.1862%" y="309" width="0.1782%" height="15" fill="rgb(207,125,25)" fg:x="291" fg:w="10"/><text x="5.4362%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1 samples, 0.02%)</title><rect x="5.3466%" y="293" width="0.0178%" height="15" fill="rgb(210,195,18)" fg:x="300" fg:w="1"/><text x="5.5966%" y="303.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1 samples, 0.02%)</title><rect x="5.3466%" y="277" width="0.0178%" height="15" fill="rgb(249,80,12)" fg:x="300" fg:w="1"/><text x="5.5966%" y="287.50"></text></g><g><title>_int_free (8 samples, 0.14%)</title><rect x="5.3823%" y="197" width="0.1426%" height="15" fill="rgb(221,65,9)" fg:x="302" fg:w="8"/><text x="5.6323%" y="207.50"></text></g><g><title>tcache_put (3 samples, 0.05%)</title><rect x="5.4714%" y="181" width="0.0535%" height="15" fill="rgb(235,49,36)" fg:x="307" fg:w="3"/><text x="5.7214%" y="191.50"></text></g><g><title>__GI___libc_free (10 samples, 0.18%)</title><rect x="5.3645%" y="213" width="0.1782%" height="15" fill="rgb(225,32,20)" fg:x="301" fg:w="10"/><text x="5.6145%" y="223.50"></text></g><g><title>arena_for_chunk (1 samples, 0.02%)</title><rect x="5.5249%" y="197" width="0.0178%" height="15" fill="rgb(215,141,46)" fg:x="310" fg:w="1"/><text x="5.7749%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.20%)</title><rect x="5.3645%" y="309" width="0.1960%" height="15" fill="rgb(250,160,47)" fg:x="301" fg:w="11"/><text x="5.6145%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.20%)</title><rect x="5.3645%" y="293" width="0.1960%" height="15" fill="rgb(216,222,40)" fg:x="301" fg:w="11"/><text x="5.6145%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.20%)</title><rect x="5.3645%" y="277" width="0.1960%" height="15" fill="rgb(234,217,39)" fg:x="301" fg:w="11"/><text x="5.6145%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.20%)</title><rect x="5.3645%" y="261" width="0.1960%" height="15" fill="rgb(207,178,40)" fg:x="301" fg:w="11"/><text x="5.6145%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.20%)</title><rect x="5.3645%" y="245" width="0.1960%" height="15" fill="rgb(221,136,13)" fg:x="301" fg:w="11"/><text x="5.6145%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.20%)</title><rect x="5.3645%" y="229" width="0.1960%" height="15" fill="rgb(249,199,10)" fg:x="301" fg:w="11"/><text x="5.6145%" y="239.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="5.5427%" y="213" width="0.0178%" height="15" fill="rgb(249,222,13)" fg:x="311" fg:w="1"/><text x="5.7927%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="5.5427%" y="197" width="0.0178%" height="15" fill="rgb(244,185,38)" fg:x="311" fg:w="1"/><text x="5.7927%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (2 samples, 0.04%)</title><rect x="5.5605%" y="309" width="0.0356%" height="15" fill="rgb(236,202,9)" fg:x="312" fg:w="2"/><text x="5.8105%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.46%)</title><rect x="5.1684%" y="373" width="0.4634%" height="15" fill="rgb(250,229,37)" fg:x="290" fg:w="26"/><text x="5.4184%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (26 samples, 0.46%)</title><rect x="5.1684%" y="357" width="0.4634%" height="15" fill="rgb(206,174,23)" fg:x="290" fg:w="26"/><text x="5.4184%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (26 samples, 0.46%)</title><rect x="5.1684%" y="341" width="0.4634%" height="15" fill="rgb(211,33,43)" fg:x="290" fg:w="26"/><text x="5.4184%" y="351.50"></text></g><g><title>day15::parse::{{closure}}::{{closure}} (25 samples, 0.45%)</title><rect x="5.1862%" y="325" width="0.4456%" height="15" fill="rgb(245,58,50)" fg:x="291" fg:w="25"/><text x="5.4362%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2 samples, 0.04%)</title><rect x="5.5962%" y="309" width="0.0356%" height="15" fill="rgb(244,68,36)" fg:x="314" fg:w="2"/><text x="5.8462%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (2 samples, 0.04%)</title><rect x="5.5962%" y="293" width="0.0356%" height="15" fill="rgb(232,229,15)" fg:x="314" fg:w="2"/><text x="5.8462%" y="303.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.02%)</title><rect x="5.6140%" y="277" width="0.0178%" height="15" fill="rgb(254,30,23)" fg:x="315" fg:w="1"/><text x="5.8640%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="5.6496%" y="213" width="0.0178%" height="15" fill="rgb(235,160,14)" fg:x="317" fg:w="1"/><text x="5.8996%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="5.6674%" y="213" width="0.0356%" height="15" fill="rgb(212,155,44)" fg:x="318" fg:w="2"/><text x="5.9174%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="5.6853%" y="197" width="0.0178%" height="15" fill="rgb(226,2,50)" fg:x="319" fg:w="1"/><text x="5.9353%" y="207.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.02%)</title><rect x="5.7031%" y="213" width="0.0178%" height="15" fill="rgb(234,177,6)" fg:x="320" fg:w="1"/><text x="5.9531%" y="223.50"></text></g><g><title>day15::parse (35 samples, 0.62%)</title><rect x="5.1150%" y="645" width="0.6238%" height="15" fill="rgb(217,24,9)" fg:x="287" fg:w="35"/><text x="5.3650%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 0.62%)</title><rect x="5.1150%" y="629" width="0.6238%" height="15" fill="rgb(220,13,46)" fg:x="287" fg:w="35"/><text x="5.3650%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (35 samples, 0.62%)</title><rect x="5.1150%" y="613" width="0.6238%" height="15" fill="rgb(239,221,27)" fg:x="287" fg:w="35"/><text x="5.3650%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 0.62%)</title><rect x="5.1150%" y="597" width="0.6238%" height="15" fill="rgb(222,198,25)" fg:x="287" fg:w="35"/><text x="5.3650%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (35 samples, 0.62%)</title><rect x="5.1150%" y="581" width="0.6238%" height="15" fill="rgb(211,99,13)" fg:x="287" fg:w="35"/><text x="5.3650%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (35 samples, 0.62%)</title><rect x="5.1150%" y="565" width="0.6238%" height="15" fill="rgb(232,111,31)" fg:x="287" fg:w="35"/><text x="5.3650%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (35 samples, 0.62%)</title><rect x="5.1150%" y="549" width="0.6238%" height="15" fill="rgb(245,82,37)" fg:x="287" fg:w="35"/><text x="5.3650%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.62%)</title><rect x="5.1150%" y="533" width="0.6238%" height="15" fill="rgb(227,149,46)" fg:x="287" fg:w="35"/><text x="5.3650%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (34 samples, 0.61%)</title><rect x="5.1328%" y="517" width="0.6060%" height="15" fill="rgb(218,36,50)" fg:x="288" fg:w="34"/><text x="5.3828%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (34 samples, 0.61%)</title><rect x="5.1328%" y="501" width="0.6060%" height="15" fill="rgb(226,80,48)" fg:x="288" fg:w="34"/><text x="5.3828%" y="511.50"></text></g><g><title>day15::parse::{{closure}} (34 samples, 0.61%)</title><rect x="5.1328%" y="485" width="0.6060%" height="15" fill="rgb(238,224,15)" fg:x="288" fg:w="34"/><text x="5.3828%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 0.61%)</title><rect x="5.1328%" y="469" width="0.6060%" height="15" fill="rgb(241,136,10)" fg:x="288" fg:w="34"/><text x="5.3828%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (34 samples, 0.61%)</title><rect x="5.1328%" y="453" width="0.6060%" height="15" fill="rgb(208,32,45)" fg:x="288" fg:w="34"/><text x="5.3828%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 0.61%)</title><rect x="5.1328%" y="437" width="0.6060%" height="15" fill="rgb(207,135,9)" fg:x="288" fg:w="34"/><text x="5.3828%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (34 samples, 0.61%)</title><rect x="5.1328%" y="421" width="0.6060%" height="15" fill="rgb(206,86,44)" fg:x="288" fg:w="34"/><text x="5.3828%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (34 samples, 0.61%)</title><rect x="5.1328%" y="405" width="0.6060%" height="15" fill="rgb(245,177,15)" fg:x="288" fg:w="34"/><text x="5.3828%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (34 samples, 0.61%)</title><rect x="5.1328%" y="389" width="0.6060%" height="15" fill="rgb(206,64,50)" fg:x="288" fg:w="34"/><text x="5.3828%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.11%)</title><rect x="5.6318%" y="373" width="0.1069%" height="15" fill="rgb(234,36,40)" fg:x="316" fg:w="6"/><text x="5.8818%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.11%)</title><rect x="5.6318%" y="357" width="0.1069%" height="15" fill="rgb(213,64,8)" fg:x="316" fg:w="6"/><text x="5.8818%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.11%)</title><rect x="5.6318%" y="341" width="0.1069%" height="15" fill="rgb(210,75,36)" fg:x="316" fg:w="6"/><text x="5.8818%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.11%)</title><rect x="5.6318%" y="325" width="0.1069%" height="15" fill="rgb(229,88,21)" fg:x="316" fg:w="6"/><text x="5.8818%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.11%)</title><rect x="5.6318%" y="309" width="0.1069%" height="15" fill="rgb(252,204,47)" fg:x="316" fg:w="6"/><text x="5.8818%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.09%)</title><rect x="5.6496%" y="293" width="0.0891%" height="15" fill="rgb(208,77,27)" fg:x="317" fg:w="5"/><text x="5.8996%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.09%)</title><rect x="5.6496%" y="277" width="0.0891%" height="15" fill="rgb(221,76,26)" fg:x="317" fg:w="5"/><text x="5.8996%" y="287.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.09%)</title><rect x="5.6496%" y="261" width="0.0891%" height="15" fill="rgb(225,139,18)" fg:x="317" fg:w="5"/><text x="5.8996%" y="271.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.09%)</title><rect x="5.6496%" y="245" width="0.0891%" height="15" fill="rgb(230,137,11)" fg:x="317" fg:w="5"/><text x="5.8996%" y="255.50"></text></g><g><title>_int_realloc (5 samples, 0.09%)</title><rect x="5.6496%" y="229" width="0.0891%" height="15" fill="rgb(212,28,1)" fg:x="317" fg:w="5"/><text x="5.8996%" y="239.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="5.7209%" y="213" width="0.0178%" height="15" fill="rgb(248,164,17)" fg:x="321" fg:w="1"/><text x="5.9709%" y="223.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="5.7209%" y="197" width="0.0178%" height="15" fill="rgb(222,171,42)" fg:x="321" fg:w="1"/><text x="5.9709%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (112 samples, 2.00%)</title><rect x="27.2500%" y="629" width="1.9961%" height="15" fill="rgb(243,84,45)" fg:x="1529" fg:w="112"/><text x="27.5000%" y="639.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (112 samples, 2.00%)</title><rect x="27.2500%" y="613" width="1.9961%" height="15" fill="rgb(252,49,23)" fg:x="1529" fg:w="112"/><text x="27.5000%" y="623.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (112 samples, 2.00%)</title><rect x="27.2500%" y="597" width="1.9961%" height="15" fill="rgb(215,19,7)" fg:x="1529" fg:w="112"/><text x="27.5000%" y="607.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.09%)</title><rect x="29.2461%" y="629" width="0.0891%" height="15" fill="rgb(238,81,41)" fg:x="1641" fg:w="5"/><text x="29.4961%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.09%)</title><rect x="29.2461%" y="613" width="0.0891%" height="15" fill="rgb(210,199,37)" fg:x="1641" fg:w="5"/><text x="29.4961%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.09%)</title><rect x="29.2461%" y="597" width="0.0891%" height="15" fill="rgb(244,192,49)" fg:x="1641" fg:w="5"/><text x="29.4961%" y="607.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (8 samples, 0.14%)</title><rect x="30.1551%" y="581" width="0.1426%" height="15" fill="rgb(226,211,11)" fg:x="1692" fg:w="8"/><text x="30.4051%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (8 samples, 0.14%)</title><rect x="30.1551%" y="565" width="0.1426%" height="15" fill="rgb(236,162,54)" fg:x="1692" fg:w="8"/><text x="30.4051%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="30.2976%" y="581" width="0.0178%" height="15" fill="rgb(220,229,9)" fg:x="1700" fg:w="1"/><text x="30.5476%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (56 samples, 1.00%)</title><rect x="29.3352%" y="613" width="0.9980%" height="15" fill="rgb(250,87,22)" fg:x="1646" fg:w="56"/><text x="29.5852%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (56 samples, 1.00%)</title><rect x="29.3352%" y="597" width="0.9980%" height="15" fill="rgb(239,43,17)" fg:x="1646" fg:w="56"/><text x="29.5852%" y="607.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="30.3155%" y="581" width="0.0178%" height="15" fill="rgb(231,177,25)" fg:x="1701" fg:w="1"/><text x="30.5655%" y="591.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="30.3155%" y="565" width="0.0178%" height="15" fill="rgb(219,179,1)" fg:x="1701" fg:w="1"/><text x="30.5655%" y="575.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 1.59%)</title><rect x="29.3352%" y="629" width="1.5862%" height="15" fill="rgb(238,219,53)" fg:x="1646" fg:w="89"/><text x="29.5852%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (33 samples, 0.59%)</title><rect x="30.3333%" y="613" width="0.5881%" height="15" fill="rgb(232,167,36)" fg:x="1702" fg:w="33"/><text x="30.5833%" y="623.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (33 samples, 0.59%)</title><rect x="30.3333%" y="597" width="0.5881%" height="15" fill="rgb(244,19,51)" fg:x="1702" fg:w="33"/><text x="30.5833%" y="607.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (33 samples, 0.59%)</title><rect x="30.3333%" y="581" width="0.5881%" height="15" fill="rgb(224,6,22)" fg:x="1702" fg:w="33"/><text x="30.5833%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (33 samples, 0.59%)</title><rect x="30.3333%" y="565" width="0.5881%" height="15" fill="rgb(224,145,5)" fg:x="1702" fg:w="33"/><text x="30.5833%" y="575.50"></text></g><g><title>core::ptr::read (33 samples, 0.59%)</title><rect x="30.3333%" y="549" width="0.5881%" height="15" fill="rgb(234,130,49)" fg:x="1702" fg:w="33"/><text x="30.5833%" y="559.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (33 samples, 0.59%)</title><rect x="30.3333%" y="533" width="0.5881%" height="15" fill="rgb(254,6,2)" fg:x="1702" fg:w="33"/><text x="30.5833%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="30.9214%" y="629" width="0.0178%" height="15" fill="rgb(208,96,46)" fg:x="1735" fg:w="1"/><text x="31.1714%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.04%)</title><rect x="31.1174%" y="597" width="0.0356%" height="15" fill="rgb(239,3,39)" fg:x="1746" fg:w="2"/><text x="31.3674%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.04%)</title><rect x="31.1174%" y="581" width="0.0356%" height="15" fill="rgb(233,210,1)" fg:x="1746" fg:w="2"/><text x="31.3674%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="31.1531%" y="597" width="0.0178%" height="15" fill="rgb(244,137,37)" fg:x="1748" fg:w="1"/><text x="31.4031%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="31.1531%" y="581" width="0.0178%" height="15" fill="rgb(240,136,2)" fg:x="1748" fg:w="1"/><text x="31.4031%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (62 samples, 1.10%)</title><rect x="31.0462%" y="613" width="1.1050%" height="15" fill="rgb(239,18,37)" fg:x="1742" fg:w="62"/><text x="31.2962%" y="623.50"></text></g><g><title>core::ptr::read (55 samples, 0.98%)</title><rect x="31.1709%" y="597" width="0.9802%" height="15" fill="rgb(218,185,22)" fg:x="1749" fg:w="55"/><text x="31.4209%" y="607.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (55 samples, 0.98%)</title><rect x="31.1709%" y="581" width="0.9802%" height="15" fill="rgb(225,218,4)" fg:x="1749" fg:w="55"/><text x="31.4209%" y="591.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (325 samples, 5.79%)</title><rect x="33.0601%" y="581" width="5.7922%" height="15" fill="rgb(230,182,32)" fg:x="1855" fg:w="325"/><text x="33.3101%" y="591.50">alloc::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.45%)</title><rect x="41.5434%" y="533" width="0.4456%" height="15" fill="rgb(242,56,43)" fg:x="2331" fg:w="25"/><text x="41.7934%" y="543.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (34 samples, 0.61%)</title><rect x="41.5434%" y="549" width="0.6060%" height="15" fill="rgb(233,99,24)" fg:x="2331" fg:w="34"/><text x="41.7934%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.16%)</title><rect x="41.9890%" y="533" width="0.1604%" height="15" fill="rgb(234,209,42)" fg:x="2356" fg:w="9"/><text x="42.2390%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.16%)</title><rect x="41.9890%" y="517" width="0.1604%" height="15" fill="rgb(227,7,12)" fg:x="2356" fg:w="9"/><text x="42.2390%" y="527.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (42 samples, 0.75%)</title><rect x="42.1493%" y="549" width="0.7485%" height="15" fill="rgb(245,203,43)" fg:x="2365" fg:w="42"/><text x="42.3993%" y="559.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (42 samples, 0.75%)</title><rect x="42.1493%" y="533" width="0.7485%" height="15" fill="rgb(238,205,33)" fg:x="2365" fg:w="42"/><text x="42.3993%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8801%" y="517" width="0.0178%" height="15" fill="rgb(231,56,7)" fg:x="2406" fg:w="1"/><text x="43.1301%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8801%" y="501" width="0.0178%" height="15" fill="rgb(244,186,29)" fg:x="2406" fg:w="1"/><text x="43.1301%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8801%" y="485" width="0.0178%" height="15" fill="rgb(234,111,31)" fg:x="2406" fg:w="1"/><text x="43.1301%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8801%" y="469" width="0.0178%" height="15" fill="rgb(241,149,10)" fg:x="2406" fg:w="1"/><text x="43.1301%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.8801%" y="453" width="0.0178%" height="15" fill="rgb(249,206,44)" fg:x="2406" fg:w="1"/><text x="43.1301%" y="463.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (17 samples, 0.30%)</title><rect x="42.8979%" y="485" width="0.3030%" height="15" fill="rgb(251,153,30)" fg:x="2407" fg:w="17"/><text x="43.1479%" y="495.50"></text></g><g><title>core::cmp::Ordering::then_with (31 samples, 0.55%)</title><rect x="43.2009%" y="485" width="0.5525%" height="15" fill="rgb(239,152,38)" fg:x="2424" fg:w="31"/><text x="43.4509%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (68 samples, 1.21%)</title><rect x="42.8979%" y="549" width="1.2119%" height="15" fill="rgb(249,139,47)" fg:x="2407" fg:w="68"/><text x="43.1479%" y="559.50"></text></g><g><title>core::cmp::PartialOrd::le (68 samples, 1.21%)</title><rect x="42.8979%" y="533" width="1.2119%" height="15" fill="rgb(244,64,35)" fg:x="2407" fg:w="68"/><text x="43.1479%" y="543.50"></text></g><g><title>&lt;day15::Node as core::cmp::PartialOrd&gt;::partial_cmp (68 samples, 1.21%)</title><rect x="42.8979%" y="517" width="1.2119%" height="15" fill="rgb(216,46,15)" fg:x="2407" fg:w="68"/><text x="43.1479%" y="527.50"></text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp (68 samples, 1.21%)</title><rect x="42.8979%" y="501" width="1.2119%" height="15" fill="rgb(250,74,19)" fg:x="2407" fg:w="68"/><text x="43.1479%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (20 samples, 0.36%)</title><rect x="43.7533%" y="485" width="0.3564%" height="15" fill="rgb(249,42,33)" fg:x="2455" fg:w="20"/><text x="44.0033%" y="495.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (207 samples, 3.69%)</title><rect x="40.9731%" y="565" width="3.6892%" height="15" fill="rgb(242,149,17)" fg:x="2299" fg:w="207"/><text x="41.2231%" y="575.50">allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day15::Node&gt;&gt; (31 samples, 0.55%)</title><rect x="44.1098%" y="549" width="0.5525%" height="15" fill="rgb(244,29,21)" fg:x="2475" fg:w="31"/><text x="44.3598%" y="559.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.55%)</title><rect x="44.1098%" y="533" width="0.5525%" height="15" fill="rgb(220,130,37)" fg:x="2475" fg:w="31"/><text x="44.3598%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.55%)</title><rect x="44.1098%" y="517" width="0.5525%" height="15" fill="rgb(211,67,2)" fg:x="2475" fg:w="31"/><text x="44.3598%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (480 samples, 8.55%)</title><rect x="44.6623%" y="549" width="8.5546%" height="15" fill="rgb(235,68,52)" fg:x="2506" fg:w="480"/><text x="44.9123%" y="559.50">core::intrin..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (697 samples, 12.42%)</title><rect x="44.6623%" y="565" width="12.4220%" height="15" fill="rgb(246,142,3)" fg:x="2506" fg:w="697"/><text x="44.9123%" y="575.50">alloc::collections:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (217 samples, 3.87%)</title><rect x="53.2169%" y="549" width="3.8674%" height="15" fill="rgb(241,25,7)" fg:x="2986" fg:w="217"/><text x="53.4669%" y="559.50">core..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (217 samples, 3.87%)</title><rect x="53.2169%" y="533" width="3.8674%" height="15" fill="rgb(242,119,39)" fg:x="2986" fg:w="217"/><text x="53.4669%" y="543.50">core..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (173 samples, 3.08%)</title><rect x="65.4429%" y="501" width="3.0832%" height="15" fill="rgb(241,98,45)" fg:x="3672" fg:w="173"/><text x="65.6929%" y="511.50">all..</text></g><g><title>core::cmp::Ordering::then_with (248 samples, 4.42%)</title><rect x="68.5261%" y="501" width="4.4199%" height="15" fill="rgb(254,28,30)" fg:x="3845" fg:w="248"/><text x="68.7761%" y="511.50">core:..</text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp::{{closure}} (62 samples, 1.10%)</title><rect x="71.8410%" y="485" width="1.1050%" height="15" fill="rgb(241,142,54)" fg:x="4031" fg:w="62"/><text x="72.0910%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (62 samples, 1.10%)</title><rect x="71.8410%" y="469" width="1.1050%" height="15" fill="rgb(222,85,15)" fg:x="4031" fg:w="62"/><text x="72.0910%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (1,242 samples, 22.14%)</title><rect x="57.0843%" y="565" width="22.1351%" height="15" fill="rgb(210,85,47)" fg:x="3203" fg:w="1242"/><text x="57.3343%" y="575.50">core::cmp::impls::&lt;impl core::cmp::..</text></g><g><title>core::cmp::PartialOrd::le (1,242 samples, 22.14%)</title><rect x="57.0843%" y="549" width="22.1351%" height="15" fill="rgb(224,206,25)" fg:x="3203" fg:w="1242"/><text x="57.3343%" y="559.50">core::cmp::PartialOrd::le</text></g><g><title>&lt;day15::Node as core::cmp::PartialOrd&gt;::partial_cmp (795 samples, 14.17%)</title><rect x="65.0508%" y="533" width="14.1686%" height="15" fill="rgb(243,201,19)" fg:x="3650" fg:w="795"/><text x="65.3008%" y="543.50">&lt;day15::Node as core::..</text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp (795 samples, 14.17%)</title><rect x="65.0508%" y="517" width="14.1686%" height="15" fill="rgb(236,59,4)" fg:x="3650" fg:w="795"/><text x="65.3008%" y="527.50">&lt;day15::Node as core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (352 samples, 6.27%)</title><rect x="72.9460%" y="501" width="6.2734%" height="15" fill="rgb(254,179,45)" fg:x="4093" fg:w="352"/><text x="73.1960%" y="511.50">core::cm..</text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.48%)</title><rect x="79.2194%" y="517" width="0.4812%" height="15" fill="rgb(226,14,10)" fg:x="4445" fg:w="27"/><text x="79.4694%" y="527.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (2,300 samples, 40.99%)</title><rect x="38.8523%" y="581" width="40.9909%" height="15" fill="rgb(244,27,41)" fg:x="2180" fg:w="2300"/><text x="39.1023%" y="591.50">alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom</text></g><g><title>core::mem::drop (35 samples, 0.62%)</title><rect x="79.2194%" y="565" width="0.6238%" height="15" fill="rgb(235,35,32)" fg:x="4445" fg:w="35"/><text x="79.4694%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day15::Node&gt;&gt; (35 samples, 0.62%)</title><rect x="79.2194%" y="549" width="0.6238%" height="15" fill="rgb(218,68,31)" fg:x="4445" fg:w="35"/><text x="79.4694%" y="559.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.62%)</title><rect x="79.2194%" y="533" width="0.6238%" height="15" fill="rgb(207,120,37)" fg:x="4445" fg:w="35"/><text x="79.4694%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (8 samples, 0.14%)</title><rect x="79.7006%" y="517" width="0.1426%" height="15" fill="rgb(227,98,0)" fg:x="4472" fg:w="8"/><text x="79.9506%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (8 samples, 0.14%)</title><rect x="79.7006%" y="501" width="0.1426%" height="15" fill="rgb(207,7,3)" fg:x="4472" fg:w="8"/><text x="79.9506%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8 samples, 0.14%)</title><rect x="79.7006%" y="485" width="0.1426%" height="15" fill="rgb(206,98,19)" fg:x="4472" fg:w="8"/><text x="79.9506%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.14%)</title><rect x="79.7006%" y="469" width="0.1426%" height="15" fill="rgb(217,5,26)" fg:x="4472" fg:w="8"/><text x="79.9506%" y="479.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="79.8432%" y="565" width="0.0178%" height="15" fill="rgb(235,190,38)" fg:x="4480" fg:w="1"/><text x="80.0932%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (2,761 samples, 49.21%)</title><rect x="30.9392%" y="629" width="49.2069%" height="15" fill="rgb(247,86,24)" fg:x="1736" fg:w="2761"/><text x="31.1892%" y="639.50">alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop</text></g><g><title>core::option::Option&lt;T&gt;::map (2,693 samples, 48.00%)</title><rect x="32.1511%" y="613" width="47.9950%" height="15" fill="rgb(205,101,16)" fg:x="1804" fg:w="2693"/><text x="32.4011%" y="623.50">core::option::Option&lt;T&gt;::map</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (2,667 samples, 47.53%)</title><rect x="32.6145%" y="597" width="47.5316%" height="15" fill="rgb(246,168,33)" fg:x="1830" fg:w="2667"/><text x="32.8645%" y="607.50">alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}}</text></g><g><title>core::mem::swap (17 samples, 0.30%)</title><rect x="79.8432%" y="581" width="0.3030%" height="15" fill="rgb(231,114,1)" fg:x="4480" fg:w="17"/><text x="80.0932%" y="591.50"></text></g><g><title>core::mem::swap_simple (16 samples, 0.29%)</title><rect x="79.8610%" y="565" width="0.2852%" height="15" fill="rgb(207,184,53)" fg:x="4481" fg:w="16"/><text x="80.1110%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.09%)</title><rect x="80.3244%" y="581" width="0.0891%" height="15" fill="rgb(224,95,51)" fg:x="4507" fg:w="5"/><text x="80.5744%" y="591.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (8 samples, 0.14%)</title><rect x="80.3244%" y="597" width="0.1426%" height="15" fill="rgb(212,188,45)" fg:x="4507" fg:w="8"/><text x="80.5744%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.05%)</title><rect x="80.4135%" y="581" width="0.0535%" height="15" fill="rgb(223,154,38)" fg:x="4512" fg:w="3"/><text x="80.6635%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.05%)</title><rect x="80.4135%" y="565" width="0.0535%" height="15" fill="rgb(251,22,52)" fg:x="4512" fg:w="3"/><text x="80.6635%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (29 samples, 0.52%)</title><rect x="80.4669%" y="597" width="0.5168%" height="15" fill="rgb(229,209,22)" fg:x="4515" fg:w="29"/><text x="80.7169%" y="607.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (29 samples, 0.52%)</title><rect x="80.4669%" y="581" width="0.5168%" height="15" fill="rgb(234,138,34)" fg:x="4515" fg:w="29"/><text x="80.7169%" y="591.50"></text></g><g><title>core::cmp::Ordering::then_with (4 samples, 0.07%)</title><rect x="81.0194%" y="533" width="0.0713%" height="15" fill="rgb(212,95,11)" fg:x="4546" fg:w="4"/><text x="81.2694%" y="543.50"></text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp::{{closure}} (4 samples, 0.07%)</title><rect x="81.0194%" y="517" width="0.0713%" height="15" fill="rgb(240,179,47)" fg:x="4546" fg:w="4"/><text x="81.2694%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.07%)</title><rect x="81.0194%" y="501" width="0.0713%" height="15" fill="rgb(240,163,11)" fg:x="4546" fg:w="4"/><text x="81.2694%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (11 samples, 0.20%)</title><rect x="81.0907%" y="533" width="0.1960%" height="15" fill="rgb(236,37,12)" fg:x="4550" fg:w="11"/><text x="81.3407%" y="543.50"></text></g><g><title>&lt;day15::Node as core::cmp::Ord&gt;::cmp (22 samples, 0.39%)</title><rect x="80.9838%" y="549" width="0.3921%" height="15" fill="rgb(232,164,16)" fg:x="4544" fg:w="22"/><text x="81.2338%" y="559.50"></text></g><g><title>day15::shortest_path (5 samples, 0.09%)</title><rect x="81.2868%" y="533" width="0.0891%" height="15" fill="rgb(244,205,15)" fg:x="4561" fg:w="5"/><text x="81.5368%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (27 samples, 0.48%)</title><rect x="80.9838%" y="597" width="0.4812%" height="15" fill="rgb(223,117,47)" fg:x="4544" fg:w="27"/><text x="81.2338%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::le (27 samples, 0.48%)</title><rect x="80.9838%" y="581" width="0.4812%" height="15" fill="rgb(244,107,35)" fg:x="4544" fg:w="27"/><text x="81.2338%" y="591.50"></text></g><g><title>&lt;day15::Node as core::cmp::PartialOrd&gt;::partial_cmp (27 samples, 0.48%)</title><rect x="80.9838%" y="565" width="0.4812%" height="15" fill="rgb(205,140,8)" fg:x="4544" fg:w="27"/><text x="81.2338%" y="575.50"></text></g><g><title>day15::shortest_path (5 samples, 0.09%)</title><rect x="81.3759%" y="549" width="0.0891%" height="15" fill="rgb(228,84,46)" fg:x="4566" fg:w="5"/><text x="81.6259%" y="559.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (76 samples, 1.35%)</title><rect x="80.1461%" y="613" width="1.3545%" height="15" fill="rgb(254,188,9)" fg:x="4497" fg:w="76"/><text x="80.3961%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;day15::Node&gt;&gt; (2 samples, 0.04%)</title><rect x="81.4650%" y="597" width="0.0356%" height="15" fill="rgb(206,112,54)" fg:x="4571" fg:w="2"/><text x="81.7150%" y="607.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="81.4650%" y="581" width="0.0356%" height="15" fill="rgb(216,84,49)" fg:x="4571" fg:w="2"/><text x="81.7150%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="81.4650%" y="565" width="0.0356%" height="15" fill="rgb(214,194,35)" fg:x="4571" fg:w="2"/><text x="81.7150%" y="575.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (121 samples, 2.16%)</title><rect x="80.1461%" y="629" width="2.1565%" height="15" fill="rgb(249,28,3)" fg:x="4497" fg:w="121"/><text x="80.3961%" y="639.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45 samples, 0.80%)</title><rect x="81.5006%" y="613" width="0.8020%" height="15" fill="rgb(222,56,52)" fg:x="4573" fg:w="45"/><text x="81.7506%" y="623.50"></text></g><g><title>core::ptr::write (32 samples, 0.57%)</title><rect x="81.7323%" y="597" width="0.5703%" height="15" fill="rgb(245,217,50)" fg:x="4586" fg:w="32"/><text x="81.9823%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3026%" y="373" width="0.0356%" height="15" fill="rgb(213,201,24)" fg:x="4618" fg:w="2"/><text x="82.5526%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3026%" y="357" width="0.0356%" height="15" fill="rgb(248,116,28)" fg:x="4618" fg:w="2"/><text x="82.5526%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3026%" y="341" width="0.0356%" height="15" fill="rgb(219,72,43)" fg:x="4618" fg:w="2"/><text x="82.5526%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3026%" y="325" width="0.0356%" height="15" fill="rgb(209,138,14)" fg:x="4618" fg:w="2"/><text x="82.5526%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3026%" y="309" width="0.0356%" height="15" fill="rgb(222,18,33)" fg:x="4618" fg:w="2"/><text x="82.5526%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.3204%" y="293" width="0.0178%" height="15" fill="rgb(213,199,7)" fg:x="4619" fg:w="1"/><text x="82.5704%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.3204%" y="277" width="0.0178%" height="15" fill="rgb(250,110,10)" fg:x="4619" fg:w="1"/><text x="82.5704%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.3204%" y="261" width="0.0178%" height="15" fill="rgb(248,123,6)" fg:x="4619" fg:w="1"/><text x="82.5704%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.3204%" y="245" width="0.0178%" height="15" fill="rgb(206,91,31)" fg:x="4619" fg:w="1"/><text x="82.5704%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.3204%" y="229" width="0.0178%" height="15" fill="rgb(211,154,13)" fg:x="4619" fg:w="1"/><text x="82.5704%" y="239.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.11%)</title><rect x="82.3026%" y="405" width="0.1069%" height="15" fill="rgb(225,148,7)" fg:x="4618" fg:w="6"/><text x="82.5526%" y="415.50"></text></g><g><title>_int_malloc (6 samples, 0.11%)</title><rect x="82.3026%" y="389" width="0.1069%" height="15" fill="rgb(220,160,43)" fg:x="4618" fg:w="6"/><text x="82.5526%" y="399.50"></text></g><g><title>sysmalloc (4 samples, 0.07%)</title><rect x="82.3383%" y="373" width="0.0713%" height="15" fill="rgb(213,52,39)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="383.50"></text></g><g><title>__glibc_morecore (4 samples, 0.07%)</title><rect x="82.3383%" y="357" width="0.0713%" height="15" fill="rgb(243,137,7)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="367.50"></text></g><g><title>__GI___sbrk (4 samples, 0.07%)</title><rect x="82.3383%" y="341" width="0.0713%" height="15" fill="rgb(230,79,13)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="351.50"></text></g><g><title>__GI___sbrk (4 samples, 0.07%)</title><rect x="82.3383%" y="325" width="0.0713%" height="15" fill="rgb(247,105,23)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="335.50"></text></g><g><title>__brk (4 samples, 0.07%)</title><rect x="82.3383%" y="309" width="0.0713%" height="15" fill="rgb(223,179,41)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.3383%" y="293" width="0.0713%" height="15" fill="rgb(218,9,34)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.3383%" y="277" width="0.0713%" height="15" fill="rgb(222,106,8)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.3383%" y="261" width="0.0713%" height="15" fill="rgb(211,220,0)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.3383%" y="245" width="0.0713%" height="15" fill="rgb(229,52,16)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="82.3383%" y="229" width="0.0713%" height="15" fill="rgb(212,155,18)" fg:x="4620" fg:w="4"/><text x="82.5883%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3739%" y="213" width="0.0356%" height="15" fill="rgb(242,21,14)" fg:x="4622" fg:w="2"/><text x="82.6239%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="82.3739%" y="197" width="0.0356%" height="15" fill="rgb(222,19,48)" fg:x="4622" fg:w="2"/><text x="82.6239%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="82.3026%" y="501" width="0.1248%" height="15" fill="rgb(232,45,27)" fg:x="4618" fg:w="7"/><text x="82.5526%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="82.3026%" y="485" width="0.1248%" height="15" fill="rgb(249,103,42)" fg:x="4618" fg:w="7"/><text x="82.5526%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.12%)</title><rect x="82.3026%" y="469" width="0.1248%" height="15" fill="rgb(246,81,33)" fg:x="4618" fg:w="7"/><text x="82.5526%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.12%)</title><rect x="82.3026%" y="453" width="0.1248%" height="15" fill="rgb(252,33,42)" fg:x="4618" fg:w="7"/><text x="82.5526%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.12%)</title><rect x="82.3026%" y="437" width="0.1248%" height="15" fill="rgb(209,212,41)" fg:x="4618" fg:w="7"/><text x="82.5526%" y="447.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.12%)</title><rect x="82.3026%" y="421" width="0.1248%" height="15" fill="rgb(207,154,6)" fg:x="4618" fg:w="7"/><text x="82.5526%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="82.4096%" y="405" width="0.0178%" height="15" fill="rgb(223,64,47)" fg:x="4624" fg:w="1"/><text x="82.6596%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.4096%" y="389" width="0.0178%" height="15" fill="rgb(211,161,38)" fg:x="4624" fg:w="1"/><text x="82.6596%" y="399.50"></text></g><g><title>alloc::vec::from_elem (42 samples, 0.75%)</title><rect x="82.3026%" y="629" width="0.7485%" height="15" fill="rgb(219,138,40)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="639.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (42 samples, 0.75%)</title><rect x="82.3026%" y="613" width="0.7485%" height="15" fill="rgb(241,228,46)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 0.75%)</title><rect x="82.3026%" y="597" width="0.7485%" height="15" fill="rgb(223,209,38)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="607.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (42 samples, 0.75%)</title><rect x="82.3026%" y="581" width="0.7485%" height="15" fill="rgb(236,164,45)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.75%)</title><rect x="82.3026%" y="565" width="0.7485%" height="15" fill="rgb(231,15,5)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (42 samples, 0.75%)</title><rect x="82.3026%" y="549" width="0.7485%" height="15" fill="rgb(252,35,15)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (42 samples, 0.75%)</title><rect x="82.3026%" y="533" width="0.7485%" height="15" fill="rgb(248,181,18)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (42 samples, 0.75%)</title><rect x="82.3026%" y="517" width="0.7485%" height="15" fill="rgb(233,39,42)" fg:x="4618" fg:w="42"/><text x="82.5526%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (35 samples, 0.62%)</title><rect x="82.4274%" y="501" width="0.6238%" height="15" fill="rgb(238,110,33)" fg:x="4625" fg:w="35"/><text x="82.6774%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.62%)</title><rect x="82.4274%" y="485" width="0.6238%" height="15" fill="rgb(233,195,10)" fg:x="4625" fg:w="35"/><text x="82.6774%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned_erms (35 samples, 0.62%)</title><rect x="82.4274%" y="469" width="0.6238%" height="15" fill="rgb(254,105,3)" fg:x="4625" fg:w="35"/><text x="82.6774%" y="479.50"></text></g><g><title>[unknown] (34 samples, 0.61%)</title><rect x="82.4452%" y="453" width="0.6060%" height="15" fill="rgb(221,225,9)" fg:x="4626" fg:w="34"/><text x="82.6952%" y="463.50"></text></g><g><title>[unknown] (31 samples, 0.55%)</title><rect x="82.4987%" y="437" width="0.5525%" height="15" fill="rgb(224,227,45)" fg:x="4629" fg:w="31"/><text x="82.7487%" y="447.50"></text></g><g><title>[unknown] (31 samples, 0.55%)</title><rect x="82.4987%" y="421" width="0.5525%" height="15" fill="rgb(229,198,43)" fg:x="4629" fg:w="31"/><text x="82.7487%" y="431.50"></text></g><g><title>[unknown] (30 samples, 0.53%)</title><rect x="82.5165%" y="405" width="0.5347%" height="15" fill="rgb(206,209,35)" fg:x="4630" fg:w="30"/><text x="82.7665%" y="415.50"></text></g><g><title>[unknown] (30 samples, 0.53%)</title><rect x="82.5165%" y="389" width="0.5347%" height="15" fill="rgb(245,195,53)" fg:x="4630" fg:w="30"/><text x="82.7665%" y="399.50"></text></g><g><title>[unknown] (27 samples, 0.48%)</title><rect x="82.5700%" y="373" width="0.4812%" height="15" fill="rgb(240,92,26)" fg:x="4633" fg:w="27"/><text x="82.8200%" y="383.50"></text></g><g><title>[unknown] (26 samples, 0.46%)</title><rect x="82.5878%" y="357" width="0.4634%" height="15" fill="rgb(207,40,23)" fg:x="4634" fg:w="26"/><text x="82.8378%" y="367.50"></text></g><g><title>[unknown] (24 samples, 0.43%)</title><rect x="82.6234%" y="341" width="0.4277%" height="15" fill="rgb(223,111,35)" fg:x="4636" fg:w="24"/><text x="82.8734%" y="351.50"></text></g><g><title>[unknown] (23 samples, 0.41%)</title><rect x="82.6412%" y="325" width="0.4099%" height="15" fill="rgb(229,147,28)" fg:x="4637" fg:w="23"/><text x="82.8912%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.30%)</title><rect x="82.7482%" y="309" width="0.3030%" height="15" fill="rgb(211,29,28)" fg:x="4643" fg:w="17"/><text x="82.9982%" y="319.50"></text></g><g><title>[unknown] (13 samples, 0.23%)</title><rect x="82.8195%" y="293" width="0.2317%" height="15" fill="rgb(228,72,33)" fg:x="4647" fg:w="13"/><text x="83.0695%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0333%" y="277" width="0.0178%" height="15" fill="rgb(205,214,31)" fg:x="4659" fg:w="1"/><text x="83.2833%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="83.0511%" y="629" width="0.0178%" height="15" fill="rgb(224,111,15)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="83.0511%" y="613" width="0.0178%" height="15" fill="rgb(253,21,26)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;]&gt; (1 samples, 0.02%)</title><rect x="83.0511%" y="597" width="0.0178%" height="15" fill="rgb(245,139,43)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="83.0511%" y="581" width="0.0178%" height="15" fill="rgb(252,170,7)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="83.0511%" y="565" width="0.0178%" height="15" fill="rgb(231,118,14)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="83.0511%" y="549" width="0.0178%" height="15" fill="rgb(238,83,0)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="83.0511%" y="533" width="0.0178%" height="15" fill="rgb(221,39,39)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="83.0511%" y="517" width="0.0178%" height="15" fill="rgb(222,119,46)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="527.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="83.0511%" y="501" width="0.0178%" height="15" fill="rgb(222,165,49)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="83.0511%" y="485" width="0.0178%" height="15" fill="rgb(219,113,52)" fg:x="4660" fg:w="1"/><text x="83.3011%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.37%)</title><rect x="97.2554%" y="613" width="0.3743%" height="15" fill="rgb(214,7,15)" fg:x="5457" fg:w="21"/><text x="97.5054%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.37%)</title><rect x="97.2554%" y="597" width="0.3743%" height="15" fill="rgb(235,32,4)" fg:x="5457" fg:w="21"/><text x="97.5054%" y="607.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.37%)</title><rect x="97.2554%" y="581" width="0.3743%" height="15" fill="rgb(238,90,54)" fg:x="5457" fg:w="21"/><text x="97.5054%" y="591.50"></text></g><g><title>day15::in_bounds (25 samples, 0.45%)</title><rect x="97.6297%" y="613" width="0.4456%" height="15" fill="rgb(213,208,19)" fg:x="5478" fg:w="25"/><text x="97.8797%" y="623.50"></text></g><g><title>day15::Node::get_adjacent_nodes (843 samples, 15.02%)</title><rect x="83.0690%" y="629" width="15.0241%" height="15" fill="rgb(233,156,4)" fg:x="4661" fg:w="843"/><text x="83.3190%" y="639.50">day15::Node::get_adjace..</text></g><g><title>day15::shortest_path (1 samples, 0.02%)</title><rect x="98.0752%" y="613" width="0.0178%" height="15" fill="rgb(207,194,5)" fg:x="5503" fg:w="1"/><text x="98.3252%" y="623.50"></text></g><g><title>day15::Node::is_goal (1 samples, 0.02%)</title><rect x="98.0930%" y="629" width="0.0178%" height="15" fill="rgb(206,111,30)" fg:x="5504" fg:w="1"/><text x="98.3430%" y="639.50"></text></g><g><title>__libc_start_main_impl (5,602 samples, 99.84%)</title><rect x="0.0356%" y="917" width="99.8396%" height="15" fill="rgb(243,70,54)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="927.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (5,602 samples, 99.84%)</title><rect x="0.0356%" y="901" width="99.8396%" height="15" fill="rgb(242,28,8)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="911.50">__libc_start_call_main</text></g><g><title>main (5,602 samples, 99.84%)</title><rect x="0.0356%" y="885" width="99.8396%" height="15" fill="rgb(219,106,18)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="895.50">main</text></g><g><title>std::rt::lang_start_internal (5,602 samples, 99.84%)</title><rect x="0.0356%" y="869" width="99.8396%" height="15" fill="rgb(244,222,10)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="879.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,602 samples, 99.84%)</title><rect x="0.0356%" y="853" width="99.8396%" height="15" fill="rgb(236,179,52)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,602 samples, 99.84%)</title><rect x="0.0356%" y="837" width="99.8396%" height="15" fill="rgb(213,23,39)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,602 samples, 99.84%)</title><rect x="0.0356%" y="821" width="99.8396%" height="15" fill="rgb(238,48,10)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="831.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,602 samples, 99.84%)</title><rect x="0.0356%" y="805" width="99.8396%" height="15" fill="rgb(251,196,23)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="815.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,602 samples, 99.84%)</title><rect x="0.0356%" y="789" width="99.8396%" height="15" fill="rgb(250,152,24)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,602 samples, 99.84%)</title><rect x="0.0356%" y="773" width="99.8396%" height="15" fill="rgb(209,150,17)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,602 samples, 99.84%)</title><rect x="0.0356%" y="757" width="99.8396%" height="15" fill="rgb(234,202,34)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="767.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,602 samples, 99.84%)</title><rect x="0.0356%" y="741" width="99.8396%" height="15" fill="rgb(253,148,53)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="751.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,602 samples, 99.84%)</title><rect x="0.0356%" y="725" width="99.8396%" height="15" fill="rgb(218,129,16)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="735.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,602 samples, 99.84%)</title><rect x="0.0356%" y="709" width="99.8396%" height="15" fill="rgb(216,85,19)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="719.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,602 samples, 99.84%)</title><rect x="0.0356%" y="693" width="99.8396%" height="15" fill="rgb(235,228,7)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="703.50">core::ops::function::FnOnce::call_once</text></g><g><title>day15::main (5,602 samples, 99.84%)</title><rect x="0.0356%" y="677" width="99.8396%" height="15" fill="rgb(245,175,0)" fg:x="2" fg:w="5602"/><text x="0.2856%" y="687.50">day15::main</text></g><g><title>day15::part2 (5,430 samples, 96.77%)</title><rect x="3.1011%" y="661" width="96.7742%" height="15" fill="rgb(208,168,36)" fg:x="174" fg:w="5430"/><text x="3.3511%" y="671.50">day15::part2</text></g><g><title>day15::shortest_path (5,282 samples, 94.14%)</title><rect x="5.7387%" y="645" width="94.1365%" height="15" fill="rgb(246,171,24)" fg:x="322" fg:w="5282"/><text x="5.9887%" y="655.50">day15::shortest_path</text></g><g><title>day15::shortest_path (99 samples, 1.76%)</title><rect x="98.1109%" y="629" width="1.7644%" height="15" fill="rgb(215,142,24)" fg:x="5505" fg:w="99"/><text x="98.3609%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="99.8931%" y="901" width="0.0356%" height="15" fill="rgb(250,187,7)" fg:x="5605" fg:w="2"/><text x="100.1431%" y="911.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.02%)</title><rect x="99.9287%" y="869" width="0.0178%" height="15" fill="rgb(228,66,33)" fg:x="5607" fg:w="1"/><text x="100.1787%" y="879.50"></text></g><g><title>_dl_start_final (2 samples, 0.04%)</title><rect x="99.9287%" y="901" width="0.0356%" height="15" fill="rgb(234,215,21)" fg:x="5607" fg:w="2"/><text x="100.1787%" y="911.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.04%)</title><rect x="99.9287%" y="885" width="0.0356%" height="15" fill="rgb(222,191,20)" fg:x="5607" fg:w="2"/><text x="100.1787%" y="895.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="99.9465%" y="869" width="0.0178%" height="15" fill="rgb(245,79,54)" fg:x="5608" fg:w="1"/><text x="100.1965%" y="879.50"></text></g><g><title>__lll_elision_init (1 samples, 0.02%)</title><rect x="99.9465%" y="853" width="0.0178%" height="15" fill="rgb(240,10,37)" fg:x="5608" fg:w="1"/><text x="100.1965%" y="863.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.02%)</title><rect x="99.9644%" y="901" width="0.0178%" height="15" fill="rgb(214,192,32)" fg:x="5609" fg:w="1"/><text x="100.2144%" y="911.50"></text></g><g><title>all (5,611 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(209,36,54)" fg:x="0" fg:w="5611"/><text x="0.2500%" y="975.50"></text></g><g><title>day15 (5,611 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(220,10,11)" fg:x="0" fg:w="5611"/><text x="0.2500%" y="959.50">day15</text></g><g><title>_start (5,610 samples, 99.98%)</title><rect x="0.0178%" y="933" width="99.9822%" height="15" fill="rgb(221,106,17)" fg:x="1" fg:w="5610"/><text x="0.2678%" y="943.50">_start</text></g><g><title>_dl_start (7 samples, 0.12%)</title><rect x="99.8752%" y="917" width="0.1248%" height="15" fill="rgb(251,142,44)" fg:x="5604" fg:w="7"/><text x="100.1252%" y="927.50"></text></g><g><title>rtld_timer_start (1 samples, 0.02%)</title><rect x="99.9822%" y="901" width="0.0178%" height="15" fill="rgb(238,13,15)" fg:x="5610" fg:w="1"/><text x="100.2322%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9822%" y="885" width="0.0178%" height="15" fill="rgb(208,107,27)" fg:x="5610" fg:w="1"/><text x="100.2322%" y="895.50"></text></g></svg></svg>